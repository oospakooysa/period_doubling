//VARIABLES

// Static mesh components that make up the skymaster
var StaticMeshComponent leftCar;
var StaticMeshComponent rightCar;

// Parameters
var(MAS14) float mmass;
var(MAS14) float armLength;
var(MAS14) float gravity;
var(MAS14) float armDamp;

// Initial Conditions
var(MAS14) float initOmega;
var(MAS14) float initTheta;

// Euler Integrator control 
var(MAS14P) float deltaT;

// Internal variables. These are the "state" variables which are not editable.
var float omega;
var float theta;
var float alpha;
var float time;

// Internal Constants. These may be used for conversions between units.
var float scaling;

// Variables for the analytic solution.
var float solnTheta;
var float maxOmega;
var float maxTheta;
var int itn;

// Periodic forcing variables
var(MAS14) float driveAmp;
var(MAS14) float drivePeriod;
var(MAS14) bool bIncludeMotor;
var(MAS14) bool bApplySquareWave;
var(MAS14) bool bAutoIncPeriod;


// FUNCTIONS
// Initialisation of this actor. DO NOT CHANGE


function Actor_Initialize(PlayerController newPlayer){

  bRunning = false;

  super.Actor_Initialize(newPlayer);

  setInitialConditions();
  visualization();

  openMatlabFile();         // Begin log capture
  setLogFileColumnLabels();

  maxOmega = 0;

  setTimer(deltaT,true,'computeTimer');

}

// Sets the initial values for this actor

function setInitialConditions() {
  time = 0;
  theta = initTheta;
  omega = initOmega;
}

function initializeVariables() {
  scaling = 52.5;
}

function reset() {
  initializeVariables();         // set the vars to zero
  setInitialConditions();        // set initital condition of vars which need it
  bRunning=false;
  visualization();
}

// Sets the column labels in the data log file. One line of code for each label

function setLogFileColumnLabels() {
  
  columnLabels.length = 0; //empty array.
  
  columnLabels[0] = "time";
  columnLabels[1] = "theta";
  columnLabels[2] = "omega";
  
  writeMatlabFileHeaderNew(columnLabels);
  
}

// Specify here which VARIABLES will be logged. Must match column labels previously listed.

function logDataRecord() {

  local array<float> dataArray;

  dataArray.length = 0;		//empty array.
  
  dataArray[0] = time;		//independent var (horizontal axis)
  dataArray[1] = theta;		//dependent var (vertical axis)
  dataArray[2] = omega;
  
  writeMatlabFileRecordNew(dataArray);
  
}

// We log the data when the iteration number "itn" divided by the iteration log
// length gives zero as a remainder.

function logData() {
  local int m;
  m = int(logInterval/deltaT);
  if( itn % m == 0) logDataRecord();
  
}

// ========================= CVI =========================

// called by the game engine at each interval deltaT. DO NOT CHANGE
// continued in the computation() and visualization() functions.

function computeTimer(){
  local int m;
  m = int(1000/deltaT);

  if(bRunning) {
   computation(deltaT);
   visualization();
   time += deltaT;
   itn++;
   logData();
   if(bAutoIncPeriod) {
     if( itn % m == 0) {
       drivePeriod += 0.2;
     }  
   }
 }
}


// COMPUTATION

function computation(float dT) {
   
  local float torque;
  local float torqueM;
	
  // Calculates the torque generated by the motor
  torqueM = driveAmp*cos(2*pi*time/drivePeriod);
  
  // Calculates the total torque on the arm
  torque = -mmass*gravity*armLength*sin(theta) - armDamp*omega + torqueM;
  
  // Calculates the angular acceleration
  alpha = torque/(mmass*armLength*armLength);

  // Calculates the angular velocity and updated angle
  omega += alpha*dT;
  theta += omega*dT;
  
}


// VISUALISATION

function Visualization(){
  local rotator newRot;

  newRot = MakeRotator(0,0,0);
  newrot.roll = theta*32768/pi;
  leftCar.SetRotation(newrot);
  newrot.roll = -theta*32768/pi;
  rightCar.SetRotation(newrot);

}


// INTERACTION

function SendValuesToHUDX( out array<string> HUDLine, out array<Color> LineCol){

  HUDLine.length = 0; //empty array.

  HUDLine[0] = actorName;
  HUDLine[1] = "bRunning: "@bRunning;
  HUDLine[2] = "Time: "@time;
  HUDLine[3] = "Omega: "@omega;
  HUDLine[4] = "Theta: "@theta;
  HUDLine[5] = "armDamp: "@armDamp;
  HUDLine[6] = "DrivePeriod: "@drivePeriod;
  HUDLine[7] = "DriveAmp: "@driveAmp;
  HUDLine[8] = "Max Omega: "@maxOmega;
  HUDLine[9] = "Max Theta: "@maxTheta;
  
  if(theta > maxTheta) maxTheta = theta;
  if(theta < 0) maxTheta = 0.0;

  if(omega > maxOmega) maxOmega = omega;
  if(omega < 0) maxOmega = 0.0;
  
  LineCol.length = 0;
  LineCol[0] = MakeColor(255,255,0,255);	// value of yellow
  LineCol[1] = MakeColor(255,0,0,255);		// value of red
  LineCol[2] = MakeColor(0,0,0,255);		// value of black
  LineCol[3] = MakeColor(210,123,2,255);	// value of burnt orange
  LineCol[4] = MakeColor(255,0,255,255);	// value of red
  LineCol[5] = MakeColor(255,0,0,255);		// value of red
  LineCol[6] = MakeColor(0,0,255,255);		// value of blue
  LineCol[7] = MakeColor(0,0,255,255);		// value of blue
  LineCol[8] = MakeColor(210,123,2,255);	// value of burnt orange
  LineCol[9] = MakeColor(255,0,255,255);	// value of magenta

}


// Allows changing the values for each parameter
// in the UDK command line

function SetParam(string paramName,float paramValue){
  WorldInfo.Game.Broadcast(self,paramName@paramValue);

  paramName = Caps(paramName);         //capitalize so case insensitive

  if(paramName == Caps("mass")){
    mmass = paramValue;
  }
  else if(paramName == Caps("initTheta")){
    initTheta = paramValue;
  }
  else if(paramName == Caps("armDamp")){
    armDamp = paramValue;
   }
  else if(paramName == Caps("driveAmp")){
    driveAmp = paramValue;
  }	  
  else if(paramName == Caps("drivePeriod")){
    drivePeriod = paramValue;
  }	   
}

// Process key presses for this actor
// Assigns various keys to produce any action you want. 
// Each key is associated with a function, or global variable.

function ProcessKey(int controllerID,name key,EInputEvent eventType){

  if(eventType == IE_Released){
    if(Key == 'F1'){
      bRunning = !bRunning;		//toggles bRunning
    }
    if(Key == 'F2'){
      bRunning = false;
	  reset();
    }
    if(Key == 'F12'){
	  bRunning = false;
      closeMatlabFile();		//stops capturing data
    }	
  }
}


defaultproperties  
{

  //Front swing
  Begin Object class=StaticMeshComponent Name=StaticMeshComponent0
    StaticMesh=StaticMesh'CBP_Assets_Extra.StaticMeshes.skymaster3' 
	  LightEnvironment=MyLightEnvironment
	  bUsePrecomputedShadows=FALSE
	  Translation=(X=0,Y=0.0,Z=420.0)
  End Object
  Components.Add(StaticMeshComponent0)
  leftCar = StaticMeshComponent0

  //Back swing
  Begin Object class=StaticMeshComponent Name=StaticMeshComponent1
    StaticMesh=StaticMesh'CBP_Assets_Extra.StaticMeshes.skymaster3' 
	  LightEnvironment=MyLightEnvironment
	  bUsePrecomputedShadows=FALSE
	  Translation=(X=256,Y=0.0,Z=420.0)
  End Object
  Components.Add(StaticMeshComponent1)
  rightCar = StaticMeshComponent1

  // Base of the Skymaster
  Begin Object class=StaticMeshComponent Name=StaticMeshComponent2
    StaticMesh=StaticMesh'CBP_Assets_Extra.StaticMeshes.skymasterbase' 
	  LightEnvironment=MyLightEnvironment
	  bUsePrecomputedShadows=FALSE
	  Translation=(X=128,Y=0.0,Z=148.0)
  End Object
  Components.Add(StaticMeshComponent2)
  
  // enable collisions for actor (including traces)
  bCollideActors=true
  bBlockActors=true

  // custom var defaults
  bRunning=true
  mmass=1.0
  scaling=52.5
  armLength=0.2824
  gravity=9.8
  initOmega=0
  initTheta=0.523
  armDamp=0.1
  deltaT=0.01
  driveAmp=2.0
  drivePeriod=1.0  
  logInterval=0.1
  
  // prefixed filename used for creating octave visuals
  logFileName="SM"         
  
  actorName="MAS14P_SkyMaster"

}